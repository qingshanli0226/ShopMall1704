package com.example.shopmall.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.shopmall.bean.StepBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STEP_BEAN".
*/
public class StepBeanDao extends AbstractDao<StepBean, String> {

    public static final String TABLENAME = "STEP_BEAN";

    /**
     * Properties of entity StepBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Data = new Property(0, String.class, "data", true, "DATA");
        public final static Property CurrentStrp = new Property(1, String.class, "currentStrp", false, "CURRENT_STRP");
        public final static Property AfterStep = new Property(2, String.class, "afterStep", false, "AFTER_STEP");
    }


    public StepBeanDao(DaoConfig config) {
        super(config);
    }
    
    public StepBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STEP_BEAN\" (" + //
                "\"DATA\" TEXT PRIMARY KEY NOT NULL ," + // 0: data
                "\"CURRENT_STRP\" TEXT," + // 1: currentStrp
                "\"AFTER_STEP\" TEXT);"); // 2: afterStep
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STEP_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StepBean entity) {
        stmt.clearBindings();
 
        String data = entity.getData();
        if (data != null) {
            stmt.bindString(1, data);
        }
 
        String currentStrp = entity.getCurrentStrp();
        if (currentStrp != null) {
            stmt.bindString(2, currentStrp);
        }
 
        String afterStep = entity.getAfterStep();
        if (afterStep != null) {
            stmt.bindString(3, afterStep);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StepBean entity) {
        stmt.clearBindings();
 
        String data = entity.getData();
        if (data != null) {
            stmt.bindString(1, data);
        }
 
        String currentStrp = entity.getCurrentStrp();
        if (currentStrp != null) {
            stmt.bindString(2, currentStrp);
        }
 
        String afterStep = entity.getAfterStep();
        if (afterStep != null) {
            stmt.bindString(3, afterStep);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public StepBean readEntity(Cursor cursor, int offset) {
        StepBean entity = new StepBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // data
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // currentStrp
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // afterStep
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StepBean entity, int offset) {
        entity.setData(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCurrentStrp(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAfterStep(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final String updateKeyAfterInsert(StepBean entity, long rowId) {
        return entity.getData();
    }
    
    @Override
    public String getKey(StepBean entity) {
        if(entity != null) {
            return entity.getData();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StepBean entity) {
        return entity.getData() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
